#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'blogcastr_types'

    module Thrift
      module Blogcastr
        class Client
          include ::Thrift::Client

          def create_user(user_name, host_name, password)
            send_create_user(user_name, host_name, password)
            return recv_create_user()
          end

          def send_create_user(user_name, host_name, password)
            send_message('create_user', Create_user_args, :user_name => user_name, :host_name => host_name, :password => password)
          end

          def recv_create_user()
            result = receive_message(Create_user_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_user failed: unknown result')
          end

          def destroy_user(user_name)
            send_destroy_user(user_name)
            return recv_destroy_user()
          end

          def send_destroy_user(user_name)
            send_message('destroy_user', Destroy_user_args, :user_name => user_name)
          end

          def recv_destroy_user()
            result = receive_message(Destroy_user_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'destroy_user failed: unknown result')
          end

          def get_user_password(user_name, host_name)
            send_get_user_password(user_name, host_name)
            return recv_get_user_password()
          end

          def send_get_user_password(user_name, host_name)
            send_message('get_user_password', Get_user_password_args, :user_name => user_name, :host_name => host_name)
          end

          def recv_get_user_password()
            result = receive_message(Get_user_password_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_user_password failed: unknown result')
          end

          def change_user_password(username, password)
            send_change_user_password(username, password)
            return recv_change_user_password()
          end

          def send_change_user_password(username, password)
            send_message('change_user_password', Change_user_password_args, :username => username, :password => password)
          end

          def recv_change_user_password()
            result = receive_message(Change_user_password_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'change_user_password failed: unknown result')
          end

          def get_user_status(username)
            send_get_user_status(username)
            return recv_get_user_status()
          end

          def send_get_user_status(username)
            send_message('get_user_status', Get_user_status_args, :username => username)
          end

          def recv_get_user_status()
            result = receive_message(Get_user_status_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_user_status failed: unknown result')
          end

          def create_pubsub_node(username, node)
            send_create_pubsub_node(username, node)
            return recv_create_pubsub_node()
          end

          def send_create_pubsub_node(username, node)
            send_message('create_pubsub_node', Create_pubsub_node_args, :username => username, :node => node)
          end

          def recv_create_pubsub_node()
            result = receive_message(Create_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_pubsub_node failed: unknown result')
          end

          def destroy_pubsub_node(username, node)
            send_destroy_pubsub_node(username, node)
            return recv_destroy_pubsub_node()
          end

          def send_destroy_pubsub_node(username, node)
            send_message('destroy_pubsub_node', Destroy_pubsub_node_args, :username => username, :node => node)
          end

          def recv_destroy_pubsub_node()
            result = receive_message(Destroy_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'destroy_pubsub_node failed: unknown result')
          end

          def subscribe_to_pubsub_node(username, resource, node)
            send_subscribe_to_pubsub_node(username, resource, node)
            return recv_subscribe_to_pubsub_node()
          end

          def send_subscribe_to_pubsub_node(username, resource, node)
            send_message('subscribe_to_pubsub_node', Subscribe_to_pubsub_node_args, :username => username, :resource => resource, :node => node)
          end

          def recv_subscribe_to_pubsub_node()
            result = receive_message(Subscribe_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'subscribe_to_pubsub_node failed: unknown result')
          end

          def unsubscribe_from_pubsub_node(username, resource, node, sub_id)
            send_unsubscribe_from_pubsub_node(username, resource, node, sub_id)
            return recv_unsubscribe_from_pubsub_node()
          end

          def send_unsubscribe_from_pubsub_node(username, resource, node, sub_id)
            send_message('unsubscribe_from_pubsub_node', Unsubscribe_from_pubsub_node_args, :username => username, :resource => resource, :node => node, :sub_id => sub_id)
          end

          def recv_unsubscribe_from_pubsub_node()
            result = receive_message(Unsubscribe_from_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'unsubscribe_from_pubsub_node failed: unknown result')
          end

          def publish_text_post_to_pubsub_node(username, node, from, text_post)
            send_publish_text_post_to_pubsub_node(username, node, from, text_post)
            return recv_publish_text_post_to_pubsub_node()
          end

          def send_publish_text_post_to_pubsub_node(username, node, from, text_post)
            send_message('publish_text_post_to_pubsub_node', Publish_text_post_to_pubsub_node_args, :username => username, :node => node, :from => from, :text_post => text_post)
          end

          def recv_publish_text_post_to_pubsub_node()
            result = receive_message(Publish_text_post_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_text_post_to_pubsub_node failed: unknown result')
          end

          def publish_image_post_to_pubsub_node(username, node, from, image_post)
            send_publish_image_post_to_pubsub_node(username, node, from, image_post)
            return recv_publish_image_post_to_pubsub_node()
          end

          def send_publish_image_post_to_pubsub_node(username, node, from, image_post)
            send_message('publish_image_post_to_pubsub_node', Publish_image_post_to_pubsub_node_args, :username => username, :node => node, :from => from, :image_post => image_post)
          end

          def recv_publish_image_post_to_pubsub_node()
            result = receive_message(Publish_image_post_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_image_post_to_pubsub_node failed: unknown result')
          end

          def publish_text_comment_post_to_pubsub_node(username, node, comment_post_from, comment_post, text_comment_from, text_comment)
            send_publish_text_comment_post_to_pubsub_node(username, node, comment_post_from, comment_post, text_comment_from, text_comment)
            return recv_publish_text_comment_post_to_pubsub_node()
          end

          def send_publish_text_comment_post_to_pubsub_node(username, node, comment_post_from, comment_post, text_comment_from, text_comment)
            send_message('publish_text_comment_post_to_pubsub_node', Publish_text_comment_post_to_pubsub_node_args, :username => username, :node => node, :comment_post_from => comment_post_from, :comment_post => comment_post, :text_comment_from => text_comment_from, :text_comment => text_comment)
          end

          def recv_publish_text_comment_post_to_pubsub_node()
            result = receive_message(Publish_text_comment_post_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_text_comment_post_to_pubsub_node failed: unknown result')
          end

          def publish_text_repost_to_pubsub_node(username, node, from, repost, text_post)
            send_publish_text_repost_to_pubsub_node(username, node, from, repost, text_post)
            return recv_publish_text_repost_to_pubsub_node()
          end

          def send_publish_text_repost_to_pubsub_node(username, node, from, repost, text_post)
            send_message('publish_text_repost_to_pubsub_node', Publish_text_repost_to_pubsub_node_args, :username => username, :node => node, :from => from, :repost => repost, :text_post => text_post)
          end

          def recv_publish_text_repost_to_pubsub_node()
            result = receive_message(Publish_text_repost_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_text_repost_to_pubsub_node failed: unknown result')
          end

          def publish_image_repost_to_pubsub_node(username, node, from, repost, image_post)
            send_publish_image_repost_to_pubsub_node(username, node, from, repost, image_post)
            return recv_publish_image_repost_to_pubsub_node()
          end

          def send_publish_image_repost_to_pubsub_node(username, node, from, repost, image_post)
            send_message('publish_image_repost_to_pubsub_node', Publish_image_repost_to_pubsub_node_args, :username => username, :node => node, :from => from, :repost => repost, :image_post => image_post)
          end

          def recv_publish_image_repost_to_pubsub_node()
            result = receive_message(Publish_image_repost_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_image_repost_to_pubsub_node failed: unknown result')
          end

          def publish_text_comment_repost_to_pubsub_node(username, node, from, repost, text_comment, via)
            send_publish_text_comment_repost_to_pubsub_node(username, node, from, repost, text_comment, via)
            return recv_publish_text_comment_repost_to_pubsub_node()
          end

          def send_publish_text_comment_repost_to_pubsub_node(username, node, from, repost, text_comment, via)
            send_message('publish_text_comment_repost_to_pubsub_node', Publish_text_comment_repost_to_pubsub_node_args, :username => username, :node => node, :from => from, :repost => repost, :text_comment => text_comment, :via => via)
          end

          def recv_publish_text_comment_repost_to_pubsub_node()
            result = receive_message(Publish_text_comment_repost_to_pubsub_node_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'publish_text_comment_repost_to_pubsub_node failed: unknown result')
          end

          def create_muc_room(user_name, host_name, room, title, subject)
            send_create_muc_room(user_name, host_name, room, title, subject)
            return recv_create_muc_room()
          end

          def send_create_muc_room(user_name, host_name, room, title, subject)
            send_message('create_muc_room', Create_muc_room_args, :user_name => user_name, :host_name => host_name, :room => room, :title => title, :subject => subject)
          end

          def recv_create_muc_room()
            result = receive_message(Create_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'create_muc_room failed: unknown result')
          end

          def destroy_muc_room(room)
            send_destroy_muc_room(room)
            return recv_destroy_muc_room()
          end

          def send_destroy_muc_room(room)
            send_message('destroy_muc_room', Destroy_muc_room_args, :room => room)
          end

          def recv_destroy_muc_room()
            result = receive_message(Destroy_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'destroy_muc_room failed: unknown result')
          end

          def get_num_muc_room_occupants(room)
            send_get_num_muc_room_occupants(room)
            return recv_get_num_muc_room_occupants()
          end

          def send_get_num_muc_room_occupants(room)
            send_message('get_num_muc_room_occupants', Get_num_muc_room_occupants_args, :room => room)
          end

          def recv_get_num_muc_room_occupants()
            result = receive_message(Get_num_muc_room_occupants_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_num_muc_room_occupants failed: unknown result')
          end

          def send_text_post_to_muc_room(user_name, host_name, room, from, text_post)
            send_send_text_post_to_muc_room(user_name, host_name, room, from, text_post)
            return recv_send_text_post_to_muc_room()
          end

          def send_send_text_post_to_muc_room(user_name, host_name, room, from, text_post)
            send_message('send_text_post_to_muc_room', Send_text_post_to_muc_room_args, :user_name => user_name, :host_name => host_name, :room => room, :from => from, :text_post => text_post)
          end

          def recv_send_text_post_to_muc_room()
            result = receive_message(Send_text_post_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_text_post_to_muc_room failed: unknown result')
          end

          def send_image_post_to_muc_room(username, host_name, room, from, image_post)
            send_send_image_post_to_muc_room(username, host_name, room, from, image_post)
            return recv_send_image_post_to_muc_room()
          end

          def send_send_image_post_to_muc_room(username, host_name, room, from, image_post)
            send_message('send_image_post_to_muc_room', Send_image_post_to_muc_room_args, :username => username, :host_name => host_name, :room => room, :from => from, :image_post => image_post)
          end

          def recv_send_image_post_to_muc_room()
            result = receive_message(Send_image_post_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_image_post_to_muc_room failed: unknown result')
          end

          def send_text_comment_post_to_muc_room(username, room, comment_post_from, comment_post, text_comment_from, text_comment)
            send_send_text_comment_post_to_muc_room(username, room, comment_post_from, comment_post, text_comment_from, text_comment)
            return recv_send_text_comment_post_to_muc_room()
          end

          def send_send_text_comment_post_to_muc_room(username, room, comment_post_from, comment_post, text_comment_from, text_comment)
            send_message('send_text_comment_post_to_muc_room', Send_text_comment_post_to_muc_room_args, :username => username, :room => room, :comment_post_from => comment_post_from, :comment_post => comment_post, :text_comment_from => text_comment_from, :text_comment => text_comment)
          end

          def recv_send_text_comment_post_to_muc_room()
            result = receive_message(Send_text_comment_post_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_text_comment_post_to_muc_room failed: unknown result')
          end

          def send_text_repost_to_muc_room(username, room, from, repost, text_post)
            send_send_text_repost_to_muc_room(username, room, from, repost, text_post)
            return recv_send_text_repost_to_muc_room()
          end

          def send_send_text_repost_to_muc_room(username, room, from, repost, text_post)
            send_message('send_text_repost_to_muc_room', Send_text_repost_to_muc_room_args, :username => username, :room => room, :from => from, :repost => repost, :text_post => text_post)
          end

          def recv_send_text_repost_to_muc_room()
            result = receive_message(Send_text_repost_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_text_repost_to_muc_room failed: unknown result')
          end

          def send_image_repost_to_muc_room(username, room, from, repost, image_post)
            send_send_image_repost_to_muc_room(username, room, from, repost, image_post)
            return recv_send_image_repost_to_muc_room()
          end

          def send_send_image_repost_to_muc_room(username, room, from, repost, image_post)
            send_message('send_image_repost_to_muc_room', Send_image_repost_to_muc_room_args, :username => username, :room => room, :from => from, :repost => repost, :image_post => image_post)
          end

          def recv_send_image_repost_to_muc_room()
            result = receive_message(Send_image_repost_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_image_repost_to_muc_room failed: unknown result')
          end

          def send_text_comment_repost_to_muc_room(username, room, from, repost, text_comment, via)
            send_send_text_comment_repost_to_muc_room(username, room, from, repost, text_comment, via)
            return recv_send_text_comment_repost_to_muc_room()
          end

          def send_send_text_comment_repost_to_muc_room(username, room, from, repost, text_comment, via)
            send_message('send_text_comment_repost_to_muc_room', Send_text_comment_repost_to_muc_room_args, :username => username, :room => room, :from => from, :repost => repost, :text_comment => text_comment, :via => via)
          end

          def recv_send_text_comment_repost_to_muc_room()
            result = receive_message(Send_text_comment_repost_to_muc_room_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_text_comment_repost_to_muc_room failed: unknown result')
          end

          def send_comment_to_muc_occupant(to, from_jid, from, text_comment)
            send_send_comment_to_muc_occupant(to, from_jid, from, text_comment)
            return recv_send_comment_to_muc_occupant()
          end

          def send_send_comment_to_muc_occupant(to, from_jid, from, text_comment)
            send_message('send_comment_to_muc_occupant', Send_comment_to_muc_occupant_args, :to => to, :from_jid => from_jid, :from => from, :text_comment => text_comment)
          end

          def recv_send_comment_to_muc_occupant()
            result = receive_message(Send_comment_to_muc_occupant_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'send_comment_to_muc_occupant failed: unknown result')
          end

          def add(x, y)
            send_add(x, y)
            return recv_add()
          end

          def send_add(x, y)
            send_message('add', Add_args, :x => x, :y => y)
          end

          def recv_add()
            result = receive_message(Add_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_create_user(seqid, iprot, oprot)
            args = read_args(iprot, Create_user_args)
            result = Create_user_result.new()
            result.success = @handler.create_user(args.user_name, args.host_name, args.password)
            write_result(result, oprot, 'create_user', seqid)
          end

          def process_destroy_user(seqid, iprot, oprot)
            args = read_args(iprot, Destroy_user_args)
            result = Destroy_user_result.new()
            result.success = @handler.destroy_user(args.user_name)
            write_result(result, oprot, 'destroy_user', seqid)
          end

          def process_get_user_password(seqid, iprot, oprot)
            args = read_args(iprot, Get_user_password_args)
            result = Get_user_password_result.new()
            result.success = @handler.get_user_password(args.user_name, args.host_name)
            write_result(result, oprot, 'get_user_password', seqid)
          end

          def process_change_user_password(seqid, iprot, oprot)
            args = read_args(iprot, Change_user_password_args)
            result = Change_user_password_result.new()
            result.success = @handler.change_user_password(args.username, args.password)
            write_result(result, oprot, 'change_user_password', seqid)
          end

          def process_get_user_status(seqid, iprot, oprot)
            args = read_args(iprot, Get_user_status_args)
            result = Get_user_status_result.new()
            result.success = @handler.get_user_status(args.username)
            write_result(result, oprot, 'get_user_status', seqid)
          end

          def process_create_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Create_pubsub_node_args)
            result = Create_pubsub_node_result.new()
            result.success = @handler.create_pubsub_node(args.username, args.node)
            write_result(result, oprot, 'create_pubsub_node', seqid)
          end

          def process_destroy_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Destroy_pubsub_node_args)
            result = Destroy_pubsub_node_result.new()
            result.success = @handler.destroy_pubsub_node(args.username, args.node)
            write_result(result, oprot, 'destroy_pubsub_node', seqid)
          end

          def process_subscribe_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Subscribe_to_pubsub_node_args)
            result = Subscribe_to_pubsub_node_result.new()
            result.success = @handler.subscribe_to_pubsub_node(args.username, args.resource, args.node)
            write_result(result, oprot, 'subscribe_to_pubsub_node', seqid)
          end

          def process_unsubscribe_from_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Unsubscribe_from_pubsub_node_args)
            result = Unsubscribe_from_pubsub_node_result.new()
            result.success = @handler.unsubscribe_from_pubsub_node(args.username, args.resource, args.node, args.sub_id)
            write_result(result, oprot, 'unsubscribe_from_pubsub_node', seqid)
          end

          def process_publish_text_post_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_text_post_to_pubsub_node_args)
            result = Publish_text_post_to_pubsub_node_result.new()
            result.success = @handler.publish_text_post_to_pubsub_node(args.username, args.node, args.from, args.text_post)
            write_result(result, oprot, 'publish_text_post_to_pubsub_node', seqid)
          end

          def process_publish_image_post_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_image_post_to_pubsub_node_args)
            result = Publish_image_post_to_pubsub_node_result.new()
            result.success = @handler.publish_image_post_to_pubsub_node(args.username, args.node, args.from, args.image_post)
            write_result(result, oprot, 'publish_image_post_to_pubsub_node', seqid)
          end

          def process_publish_text_comment_post_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_text_comment_post_to_pubsub_node_args)
            result = Publish_text_comment_post_to_pubsub_node_result.new()
            result.success = @handler.publish_text_comment_post_to_pubsub_node(args.username, args.node, args.comment_post_from, args.comment_post, args.text_comment_from, args.text_comment)
            write_result(result, oprot, 'publish_text_comment_post_to_pubsub_node', seqid)
          end

          def process_publish_text_repost_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_text_repost_to_pubsub_node_args)
            result = Publish_text_repost_to_pubsub_node_result.new()
            result.success = @handler.publish_text_repost_to_pubsub_node(args.username, args.node, args.from, args.repost, args.text_post)
            write_result(result, oprot, 'publish_text_repost_to_pubsub_node', seqid)
          end

          def process_publish_image_repost_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_image_repost_to_pubsub_node_args)
            result = Publish_image_repost_to_pubsub_node_result.new()
            result.success = @handler.publish_image_repost_to_pubsub_node(args.username, args.node, args.from, args.repost, args.image_post)
            write_result(result, oprot, 'publish_image_repost_to_pubsub_node', seqid)
          end

          def process_publish_text_comment_repost_to_pubsub_node(seqid, iprot, oprot)
            args = read_args(iprot, Publish_text_comment_repost_to_pubsub_node_args)
            result = Publish_text_comment_repost_to_pubsub_node_result.new()
            result.success = @handler.publish_text_comment_repost_to_pubsub_node(args.username, args.node, args.from, args.repost, args.text_comment, args.via)
            write_result(result, oprot, 'publish_text_comment_repost_to_pubsub_node', seqid)
          end

          def process_create_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Create_muc_room_args)
            result = Create_muc_room_result.new()
            result.success = @handler.create_muc_room(args.user_name, args.host_name, args.room, args.title, args.subject)
            write_result(result, oprot, 'create_muc_room', seqid)
          end

          def process_destroy_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Destroy_muc_room_args)
            result = Destroy_muc_room_result.new()
            result.success = @handler.destroy_muc_room(args.room)
            write_result(result, oprot, 'destroy_muc_room', seqid)
          end

          def process_get_num_muc_room_occupants(seqid, iprot, oprot)
            args = read_args(iprot, Get_num_muc_room_occupants_args)
            result = Get_num_muc_room_occupants_result.new()
            result.success = @handler.get_num_muc_room_occupants(args.room)
            write_result(result, oprot, 'get_num_muc_room_occupants', seqid)
          end

          def process_send_text_post_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_text_post_to_muc_room_args)
            result = Send_text_post_to_muc_room_result.new()
            result.success = @handler.send_text_post_to_muc_room(args.user_name, args.host_name, args.room, args.from, args.text_post)
            write_result(result, oprot, 'send_text_post_to_muc_room', seqid)
          end

          def process_send_image_post_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_image_post_to_muc_room_args)
            result = Send_image_post_to_muc_room_result.new()
            result.success = @handler.send_image_post_to_muc_room(args.username, args.host_name, args.room, args.from, args.image_post)
            write_result(result, oprot, 'send_image_post_to_muc_room', seqid)
          end

          def process_send_text_comment_post_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_text_comment_post_to_muc_room_args)
            result = Send_text_comment_post_to_muc_room_result.new()
            result.success = @handler.send_text_comment_post_to_muc_room(args.username, args.room, args.comment_post_from, args.comment_post, args.text_comment_from, args.text_comment)
            write_result(result, oprot, 'send_text_comment_post_to_muc_room', seqid)
          end

          def process_send_text_repost_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_text_repost_to_muc_room_args)
            result = Send_text_repost_to_muc_room_result.new()
            result.success = @handler.send_text_repost_to_muc_room(args.username, args.room, args.from, args.repost, args.text_post)
            write_result(result, oprot, 'send_text_repost_to_muc_room', seqid)
          end

          def process_send_image_repost_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_image_repost_to_muc_room_args)
            result = Send_image_repost_to_muc_room_result.new()
            result.success = @handler.send_image_repost_to_muc_room(args.username, args.room, args.from, args.repost, args.image_post)
            write_result(result, oprot, 'send_image_repost_to_muc_room', seqid)
          end

          def process_send_text_comment_repost_to_muc_room(seqid, iprot, oprot)
            args = read_args(iprot, Send_text_comment_repost_to_muc_room_args)
            result = Send_text_comment_repost_to_muc_room_result.new()
            result.success = @handler.send_text_comment_repost_to_muc_room(args.username, args.room, args.from, args.repost, args.text_comment, args.via)
            write_result(result, oprot, 'send_text_comment_repost_to_muc_room', seqid)
          end

          def process_send_comment_to_muc_occupant(seqid, iprot, oprot)
            args = read_args(iprot, Send_comment_to_muc_occupant_args)
            result = Send_comment_to_muc_occupant_result.new()
            result.success = @handler.send_comment_to_muc_occupant(args.to, args.from_jid, args.from, args.text_comment)
            write_result(result, oprot, 'send_comment_to_muc_occupant', seqid)
          end

          def process_add(seqid, iprot, oprot)
            args = read_args(iprot, Add_args)
            result = Add_result.new()
            result.success = @handler.add(args.x, args.y)
            write_result(result, oprot, 'add', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Create_user_args
          include ::Thrift::Struct
          USER_NAME = 1
          HOST_NAME = 2
          PASSWORD = 3

          ::Thrift::Struct.field_accessor self, :user_name, :host_name, :password
          FIELDS = {
            USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
            HOST_NAME => {:type => ::Thrift::Types::STRING, :name => 'host_name'},
            PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_user_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_user_args
          include ::Thrift::Struct
          USER_NAME = 1

          ::Thrift::Struct.field_accessor self, :user_name
          FIELDS = {
            USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_user_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_password_args
          include ::Thrift::Struct
          USER_NAME = 1
          HOST_NAME = 2

          ::Thrift::Struct.field_accessor self, :user_name, :host_name
          FIELDS = {
            USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
            HOST_NAME => {:type => ::Thrift::Types::STRING, :name => 'host_name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_password_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Change_user_password_args
          include ::Thrift::Struct
          USERNAME = 1
          PASSWORD = 2

          ::Thrift::Struct.field_accessor self, :username, :password
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Change_user_password_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_status_args
          include ::Thrift::Struct
          USERNAME = 1

          ::Thrift::Struct.field_accessor self, :username
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_status_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2

          ::Thrift::Struct.field_accessor self, :username, :node
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2

          ::Thrift::Struct.field_accessor self, :username, :node
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Subscribe_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          RESOURCE = 2
          NODE = 3

          ::Thrift::Struct.field_accessor self, :username, :resource, :node
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            RESOURCE => {:type => ::Thrift::Types::STRING, :name => 'resource'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Subscribe_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Unsubscribe_from_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          RESOURCE = 2
          NODE = 3
          SUB_ID = 4

          ::Thrift::Struct.field_accessor self, :username, :resource, :node, :sub_id
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            RESOURCE => {:type => ::Thrift::Types::STRING, :name => 'resource'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            SUB_ID => {:type => ::Thrift::Types::STRING, :name => 'sub_id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Unsubscribe_from_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_post_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          FROM = 3
          TEXT_POST = 4

          ::Thrift::Struct.field_accessor self, :username, :node, :from, :text_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            TEXT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'text_post', :class => Thrift::TextPost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_post_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_image_post_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          FROM = 3
          IMAGE_POST = 4

          ::Thrift::Struct.field_accessor self, :username, :node, :from, :image_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            IMAGE_POST => {:type => ::Thrift::Types::STRUCT, :name => 'image_post', :class => Thrift::ImagePost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_image_post_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_comment_post_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          COMMENT_POST_FROM = 3
          COMMENT_POST = 4
          TEXT_COMMENT_FROM = 5
          TEXT_COMMENT = 6

          ::Thrift::Struct.field_accessor self, :username, :node, :comment_post_from, :comment_post, :text_comment_from, :text_comment
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            COMMENT_POST_FROM => {:type => ::Thrift::Types::STRUCT, :name => 'comment_post_from', :class => Thrift::User},
            COMMENT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'comment_post', :class => Thrift::CommentPost},
            TEXT_COMMENT_FROM => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment_from', :class => Thrift::User},
            TEXT_COMMENT => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment', :class => Thrift::Comment}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_comment_post_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_repost_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          FROM = 3
          REPOST = 4
          TEXT_POST = 5

          ::Thrift::Struct.field_accessor self, :username, :node, :from, :repost, :text_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            TEXT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'text_post', :class => Thrift::TextPost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_repost_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_image_repost_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          FROM = 3
          REPOST = 4
          IMAGE_POST = 5

          ::Thrift::Struct.field_accessor self, :username, :node, :from, :repost, :image_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            IMAGE_POST => {:type => ::Thrift::Types::STRUCT, :name => 'image_post', :class => Thrift::ImagePost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_image_repost_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_comment_repost_to_pubsub_node_args
          include ::Thrift::Struct
          USERNAME = 1
          NODE = 2
          FROM = 3
          REPOST = 4
          TEXT_COMMENT = 5
          VIA = 6

          ::Thrift::Struct.field_accessor self, :username, :node, :from, :repost, :text_comment, :via
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            NODE => {:type => ::Thrift::Types::STRING, :name => 'node'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            TEXT_COMMENT => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment', :class => Thrift::Comment},
            VIA => {:type => ::Thrift::Types::LIST, :name => 'via', :element => {:type => ::Thrift::Types::STRUCT, :class => Thrift::User}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Publish_text_comment_repost_to_pubsub_node_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_muc_room_args
          include ::Thrift::Struct
          USER_NAME = 1
          HOST_NAME = 2
          ROOM = 3
          TITLE = 4
          SUBJECT = 5

          ::Thrift::Struct.field_accessor self, :user_name, :host_name, :room, :title, :subject
          FIELDS = {
            USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
            HOST_NAME => {:type => ::Thrift::Types::STRING, :name => 'host_name'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            TITLE => {:type => ::Thrift::Types::STRING, :name => 'title'},
            SUBJECT => {:type => ::Thrift::Types::STRING, :name => 'subject'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Create_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_muc_room_args
          include ::Thrift::Struct
          ROOM = 1

          ::Thrift::Struct.field_accessor self, :room
          FIELDS = {
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Destroy_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_num_muc_room_occupants_args
          include ::Thrift::Struct
          ROOM = 1

          ::Thrift::Struct.field_accessor self, :room
          FIELDS = {
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_num_muc_room_occupants_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_post_to_muc_room_args
          include ::Thrift::Struct
          USER_NAME = 1
          HOST_NAME = 2
          ROOM = 3
          FROM = 4
          TEXT_POST = 5

          ::Thrift::Struct.field_accessor self, :user_name, :host_name, :room, :from, :text_post
          FIELDS = {
            USER_NAME => {:type => ::Thrift::Types::STRING, :name => 'user_name'},
            HOST_NAME => {:type => ::Thrift::Types::STRING, :name => 'host_name'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            TEXT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'text_post', :class => Thrift::TextPost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_post_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_image_post_to_muc_room_args
          include ::Thrift::Struct
          USERNAME = 1
          HOST_NAME = 2
          ROOM = 3
          FROM = 4
          IMAGE_POST = 5

          ::Thrift::Struct.field_accessor self, :username, :host_name, :room, :from, :image_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            HOST_NAME => {:type => ::Thrift::Types::STRING, :name => 'host_name'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            IMAGE_POST => {:type => ::Thrift::Types::STRUCT, :name => 'image_post', :class => Thrift::ImagePost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_image_post_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_comment_post_to_muc_room_args
          include ::Thrift::Struct
          USERNAME = 1
          ROOM = 2
          COMMENT_POST_FROM = 3
          COMMENT_POST = 4
          TEXT_COMMENT_FROM = 5
          TEXT_COMMENT = 6

          ::Thrift::Struct.field_accessor self, :username, :room, :comment_post_from, :comment_post, :text_comment_from, :text_comment
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            COMMENT_POST_FROM => {:type => ::Thrift::Types::STRUCT, :name => 'comment_post_from', :class => Thrift::User},
            COMMENT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'comment_post', :class => Thrift::CommentPost},
            TEXT_COMMENT_FROM => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment_from', :class => Thrift::User},
            TEXT_COMMENT => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment', :class => Thrift::Comment}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_comment_post_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_repost_to_muc_room_args
          include ::Thrift::Struct
          USERNAME = 1
          ROOM = 2
          FROM = 3
          REPOST = 4
          TEXT_POST = 5

          ::Thrift::Struct.field_accessor self, :username, :room, :from, :repost, :text_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            TEXT_POST => {:type => ::Thrift::Types::STRUCT, :name => 'text_post', :class => Thrift::TextPost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_repost_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_image_repost_to_muc_room_args
          include ::Thrift::Struct
          USERNAME = 1
          ROOM = 2
          FROM = 3
          REPOST = 4
          IMAGE_POST = 5

          ::Thrift::Struct.field_accessor self, :username, :room, :from, :repost, :image_post
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            IMAGE_POST => {:type => ::Thrift::Types::STRUCT, :name => 'image_post', :class => Thrift::ImagePost}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_image_repost_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_comment_repost_to_muc_room_args
          include ::Thrift::Struct
          USERNAME = 1
          ROOM = 2
          FROM = 3
          REPOST = 4
          TEXT_COMMENT = 5
          VIA = 6

          ::Thrift::Struct.field_accessor self, :username, :room, :from, :repost, :text_comment, :via
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            ROOM => {:type => ::Thrift::Types::STRING, :name => 'room'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            REPOST => {:type => ::Thrift::Types::STRUCT, :name => 'repost', :class => Thrift::Repost},
            TEXT_COMMENT => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment', :class => Thrift::Comment},
            VIA => {:type => ::Thrift::Types::LIST, :name => 'via', :element => {:type => ::Thrift::Types::STRUCT, :class => Thrift::User}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_text_comment_repost_to_muc_room_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_comment_to_muc_occupant_args
          include ::Thrift::Struct
          TO = 1
          FROM_JID = 2
          FROM = 3
          TEXT_COMMENT = 4

          ::Thrift::Struct.field_accessor self, :to, :from_jid, :from, :text_comment
          FIELDS = {
            TO => {:type => ::Thrift::Types::STRING, :name => 'to'},
            FROM_JID => {:type => ::Thrift::Types::STRING, :name => 'from_jid'},
            FROM => {:type => ::Thrift::Types::STRUCT, :name => 'from', :class => Thrift::User},
            TEXT_COMMENT => {:type => ::Thrift::Types::STRUCT, :name => 'text_comment', :class => Thrift::Comment}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Send_comment_to_muc_occupant_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_args
          include ::Thrift::Struct
          X = 1
          Y = 2

          ::Thrift::Struct.field_accessor self, :x, :y
          FIELDS = {
            X => {:type => ::Thrift::Types::I32, :name => 'x'},
            Y => {:type => ::Thrift::Types::I32, :name => 'y'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end

    end
